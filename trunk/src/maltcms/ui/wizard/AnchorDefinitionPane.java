/*
 * Copyright (C) 2008, 2009 Nils Hoffmann Nils.Hoffmann A T
 * CeBiTec.Uni-Bielefeld.DE
 * 
 * This file is part of Cross/Maltcms.
 * 
 * Cross/Maltcms is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * Cross/Maltcms is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Cross/Maltcms. If not, see <http://www.gnu.org/licenses/>.
 * 
 * $Id$
 */
package maltcms.ui.wizard;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

import maltcms.io.csv.CSVReader;

import org.netbeans.spi.wizard.WizardPage;

import cross.tools.EvalTools;
import cross.tools.StringTools;

/**
 * 
 * @author Nils.Hoffmann@cebitec.uni-bielefeld.de
 */
public class AnchorDefinitionPane extends WizardPage implements
        ListDataListener, TableModelListener {

	/**
     * 
     */
	private static final long serialVersionUID = 4887167150661489442L;

	public static String getDescription() {
		return "Alignment Anchors";
	}

	/** Creates new form AnchorDefinition */
	public AnchorDefinitionPane() {

		// setInputFiles(new
		// String[]{"/vol/maltcms/data/carbon/glucoseA.cdf","/vol/maltcms/data/carbon/glucoseB.cdf","/vol/maltcms/data/carbon/succinatA.cdf"});
		this.dlm.addListDataListener(this);
		initComponents();
		this.jComboBox1.setPrototypeDisplayValue(this.longestString);
		editAnchorsForFile(new ActionEvent(this.jComboBox1, 0,
		        "editAnchorsForFile"));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel6 = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jButton2 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jComboBox1 = new javax.swing.JComboBox();
		jButton1 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jButton5 = new javax.swing.JButton();

		setBorder(javax.swing.BorderFactory.createTitledBorder("Anchors"));
		setPreferredSize(new java.awt.Dimension(519, 300));

		jLabel6.setText("Edit Anchors for File");

		jTable1.setModel(this.dtm);
		jTable1
		        .setToolTipText("Table showing anchors for currently selected file, allows editing of anchors");
		jScrollPane2.setViewportView(jTable1);

		jButton2.setText("Add Row");
		jButton2.setToolTipText("Add an additional anchor row to all files");
		jButton2.setActionCommand("addRow");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addRow(evt);
			}
		});

		jButton4.setText("Delete Row");
		jButton4.setToolTipText("Delete an anchor row for all files");
		jButton4.setActionCommand("deleteRow");
		jButton4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteRow(evt);
			}
		});

		jComboBox1.setModel(this.dlm);
		jComboBox1
		        .setToolTipText("All currently known input files, choose one to see it's defined anchors");
		jComboBox1.setActionCommand("editAnchorsForFile");
		jComboBox1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				editAnchorsForFile(evt);
			}
		});

		jButton1.setText("Save");
		jButton1
		        .setToolTipText("Save all anchor definitions to individual files in user supplied directory");
		jButton1.setActionCommand("saveAnchorsToFiles");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveAnchorsToFiles(evt);
			}
		});

		jButton3.setText("New");
		jButton3.setActionCommand("createNewAnchors");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				createNewAnchors(evt);
			}
		});

		jButton5.setText("Load");
		jButton5.setActionCommand("loadAnchorsFromFiles");
		jButton5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadAnchorsFromFiles(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
		        .setHorizontalGroup(layout
		                .createParallelGroup(
		                        javax.swing.GroupLayout.Alignment.LEADING)
		                .addGroup(
		                        layout
		                                .createSequentialGroup()
		                                .addContainerGap(
		                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                        Short.MAX_VALUE)
		                                .addGroup(
		                                        layout
		                                                .createParallelGroup(
		                                                        javax.swing.GroupLayout.Alignment.LEADING,
		                                                        false)
		                                                .addGroup(
		                                                        layout
		                                                                .createSequentialGroup()
		                                                                .addComponent(
		                                                                        jScrollPane2,
		                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
		                                                                        313,
		                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
		                                                                .addGap(
		                                                                        18,
		                                                                        18,
		                                                                        18)
		                                                                .addGroup(
		                                                                        layout
		                                                                                .createParallelGroup(
		                                                                                        javax.swing.GroupLayout.Alignment.LEADING,
		                                                                                        false)
		                                                                                .addComponent(
		                                                                                        jButton1,
		                                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                                        133,
		                                                                                        Short.MAX_VALUE)
		                                                                                .addComponent(
		                                                                                        jButton5,
		                                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                                        133,
		                                                                                        Short.MAX_VALUE)
		                                                                                .addComponent(
		                                                                                        jButton3,
		                                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                                        133,
		                                                                                        Short.MAX_VALUE)
		                                                                                .addComponent(
		                                                                                        jButton2,
		                                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                                        133,
		                                                                                        Short.MAX_VALUE)
		                                                                                .addComponent(
		                                                                                        jButton4,
		                                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                                        Short.MAX_VALUE)))
		                                                .addGroup(
		                                                        layout
		                                                                .createSequentialGroup()
		                                                                .addComponent(
		                                                                        jLabel6)
		                                                                .addGap(
		                                                                        18,
		                                                                        18,
		                                                                        18)
		                                                                .addComponent(
		                                                                        jComboBox1,
		                                                                        0,
		                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                                        Short.MAX_VALUE)))));
		layout
		        .setVerticalGroup(layout
		                .createParallelGroup(
		                        javax.swing.GroupLayout.Alignment.LEADING)
		                .addGroup(
		                        layout
		                                .createSequentialGroup()
		                                .addContainerGap()
		                                .addGroup(
		                                        layout
		                                                .createParallelGroup(
		                                                        javax.swing.GroupLayout.Alignment.BASELINE)
		                                                .addComponent(jLabel6)
		                                                .addComponent(
		                                                        jComboBox1,
		                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
		                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
		                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
		                                .addGap(30, 30, 30)
		                                .addGroup(
		                                        layout
		                                                .createParallelGroup(
		                                                        javax.swing.GroupLayout.Alignment.TRAILING)
		                                                .addComponent(
		                                                        jScrollPane2,
		                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
		                                                        169,
		                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
		                                                .addGroup(
		                                                        layout
		                                                                .createSequentialGroup()
		                                                                .addComponent(
		                                                                        jButton3)
		                                                                .addPreferredGap(
		                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                                                                .addComponent(
		                                                                        jButton2)
		                                                                .addPreferredGap(
		                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                                                                .addComponent(
		                                                                        jButton4)
		                                                                .addGap(
		                                                                        18,
		                                                                        18,
		                                                                        18)
		                                                                .addComponent(
		                                                                        jButton5)
		                                                                .addPreferredGap(
		                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                                                                .addComponent(
		                                                                        jButton1)))
		                                .addGap(56, 56, 56)));
	}// </editor-fold>//GEN-END:initComponents

	private void addRow(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addRow
		if (this.fileToAnchorsMap.containsKey(this.activeFile)) {
			// System.out.println("Found file in map");
			for (String key : this.fileToAnchorsMap.keySet()) {
				DefaultTableModel dtm2 = this.fileToAnchorsMap.get(key);
				// System.out.println("Table model for "+key+" = "+dtm2.getDataVector());
				// for(int i=0;i<dtm2.getRowCount();i++) {
				// if(dtm2.getValueAt(i, 0).equals(key)) {
				dtm2.addRow(new Object[] { "Anchor" + this.anchorID,
				        new Integer(-1) });
				hasSaved = false;
				// this.jTable1.setModel(dtm2);
				// this.jTable1.tableChanged(new
				// TableModelEvent(dtm2,dtm2.getRowCount()-1));

				// }
				// }
			}
			this.anchorID++;
			// validateContents(jTable1,evt);
		}
	}// GEN-LAST:event_addRow

	private void deleteRow(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteRow
		if (this.fileToAnchorsMap.containsKey(this.activeFile)) {
			DefaultTableModel dtm1 = this.fileToAnchorsMap.get(this.activeFile);
			int rmRow = this.jTable1.getSelectedRow();
			if (rmRow > -1 && dtm1.getRowCount() > 0
			        && dtm1.getColumnCount() > 0) {
				String value = (String) dtm1.getValueAt(rmRow, 0);
				for (String key : this.fileToAnchorsMap.keySet()) {
					DefaultTableModel dtm2 = this.fileToAnchorsMap.get(key);
					for (int i = 0; i < dtm2.getRowCount(); i++) {
						if (dtm2.getValueAt(i, 0) == null
						        || dtm2.getValueAt(i, 0).equals(value)) {
							dtm2.removeRow(i);
							hasSaved = false;
							// validateContents(jTable1,evt);
						}
					}
					if (dtm2.getRowCount() == 0) {
						hasSaved = true;
						setProblem(null);
					}
				}
			}
			// }
		}
	}// GEN-LAST:event_deleteRow

	private void editAnchorsForFile(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editAnchorsForFile
		if (evt.getActionCommand().equals("editAnchorsForFile")) {
			// System.out.println("EDITANCHORSFORFILE");
			int selectedIndex = this.jComboBox1.getSelectedIndex();

			// try to initialize model
			if (selectedIndex == -1) {
				selectedIndex = 0;
			}
			String file = (String) this.jComboBox1.getItemAt(selectedIndex);
			if (file != null) {
				this.activeFile = file;
				// System.out.println("Active file "+this.activeFile);
				DefaultTableModel dtm1 = null;
				if (this.fileToAnchorsMap.containsKey(this.activeFile)) {
					dtm1 = this.fileToAnchorsMap.get(this.activeFile);
					this.jTable1.setModel(dtm1);
				}
				if (this.jTable1.getModel().getRowCount() > 0
				        && !this.hasLoaded) {
					this.hasSaved = false;
					setProblem("Please save anchor files before proceeding!");
				}
			}
		}
	}// GEN-LAST:event_editAnchorsForFile

	private void createNewAnchors(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_createNewAnchors
		if (evt.getActionCommand().equals("createNewAnchors")) {
			// System.out.println("CREATENEWANCHORS");
			this.anchorID = 1;

			for (String file : this.files) {
				DefaultTableModel dtm1 = new DefaultTableModel(new String[] {
				        "Name", "Apex at scan no." }, 1) {
					/**
                     * 
                     */
					private static final long serialVersionUID = -1968034023351107872L;

					@Override
					public Class<?> getColumnClass(int c) {
						if (c == 1) {
							return Integer.class;
						}
						return super.getColumnClass(c);
					}
				};
				dtm1.addTableModelListener(this);
				dtm1.setValueAt("Anchor" + this.anchorID, 0, 0);
				dtm1.setValueAt(new Integer(-1), 0, 1);
				this.fileToAnchorsMap.put(file, dtm1);
				this.jTable1.setModel(dtm1);
				this.jTable1.setColumnSelectionInterval(0, dtm1
				        .getColumnCount() - 1);
				this.hasSaved = false;
				this.hasLoaded = false;
			}
			this.anchorID++;
		}
	}// GEN-LAST:event_createNewAnchors

	private void saveAnchorsToFiles(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAnchorsToFiles
		if (evt.getActionCommand().equals("saveAnchorsToFiles")) {
			saveAnchorsToFiles();
		}
	}// GEN-LAST:event_saveAnchorsToFiles

	private void loadAnchorsFromFiles(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadAnchorsFromFiles
		if (evt.getActionCommand().equals("loadAnchorsFromFiles")) {
			loadAnchorsFromFiles();
		}
	}// GEN-LAST:event_loadAnchorsFromFiles

	public String[] getInputFilesAsStringArray(File[] f) {
		String[] s = new String[f.length];

		int i = 0;
		for (File file : f) {
			try {
				BufferedReader br = new BufferedReader(new FileReader(file));
				String firstLine = br.readLine();
				firstLine = firstLine.substring(firstLine.indexOf(">", 0) + 1,
				        firstLine.length()).trim();
				// System.out.println("FirstLine: "+firstLine);
				s[i++] = firstLine;
			} catch (IOException ex) {
				System.err.println(ex.getLocalizedMessage());
			}
		}
		return s;
	}

	private void setInputFiles(String[] files) {
		// String[] files1 = new
		// String[]{"/vol/maltcms/data/carbon/glucoseA.cdf","/vol/maltcms/data/carbon/glucoseB.cdf","/vol/maltcms/data/carbon/succinatA.cdf"};
		String maxLength = "";
		for (String file : files) {
			this.dlm.addElement(file);
			this.files.add(file);

			if (file.length() > maxLength.length()) {
				maxLength = file;
			}
		}
		// System.out.println(this.fileToAnchorsMap);
		this.longestString = maxLength;

	}

	public void saveAnchorsToFiles() {
		final JComponent jc = this;
		final HashSet<String> fls = this.files;
		final HashMap<String, DefaultTableModel> fta = this.fileToAnchorsMap;
		Runnable r = new Runnable() {

			public void run() {
				// if the model has no rows, skip
				if (jTable1.getModel().getRowCount() > 0) {
					// check that everything is okay

					if (checkAnchors(fls, fta)) {

						JFileChooser jfc = new JFileChooser(cwd);
						jfc
						        .setDialogTitle("Select output directory for anchor files");
						jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
						int save = jfc.showSaveDialog(SwingUtilities
						        .getRoot(jc));
						if (save == JFileChooser.APPROVE_OPTION) {
							setEnabled(false);
							File outputDir = jfc.getSelectedFile();
							ArrayList<String> anchorFiles = new ArrayList<String>();
							for (String key : fls) {
								File output = new File(outputDir,
								        new File(StringTools.removeFileExt(key)
								                + ".txt").getName());
								if (output.exists()) {
									int ret = JOptionPane
									        .showOptionDialog(
									                SwingUtilities.getRoot(jc),
									                "File "
									                        + output
									                        + " already exists, overwrite?",
									                "Overwrite existing file?",
									                JOptionPane.YES_NO_OPTION,
									                JOptionPane.QUESTION_MESSAGE,
									                null, null, null);
									if (ret == JOptionPane.NO_OPTION) {
										hasSaved = false;
										return;
									}
								}
								String fileName = output.getName();
								String fnameNoSuffix = fileName
								        .substring(
								                0,
								                (fileName.lastIndexOf(".") < 0 ? fileName
								                        .length()
								                        : fileName
								                                .lastIndexOf(".")));
								// System.out.println("Filename w/o suffix: "+fnameNoSuffix);
								StringBuffer sb = new StringBuffer();
								sb.append(">" + key + "\n");
								sb.append("Name\tRI\tRT\tScan\n");
								DefaultTableModel dtm = fta.get(key);
								int lastIndex = -1;
								for (int i = 0; i < dtm.getRowCount(); i++) {
									String o = dtm.getValueAt(i, 1).toString();
									int value = Integer.parseInt(o);
									if (o.equals("-1")) {
										sb.append(dtm.getValueAt(i, 0)
										        + "\t-\t-\t" + "-" + "\n");
									} else {
										if (value > lastIndex) {
											sb.append(dtm.getValueAt(i, 0)
											        + "\t-\t-\t" + o + "\n");
											lastIndex = value;
										} else {
											// JOptionPane.showConfirmDialog(getTopLevelAncestor(),
											// "Scan no. values must be in ascending order!");
											jComboBox1.setSelectedItem(key);
											editAnchorsForFile(new ActionEvent(
											        jTable1, 1,
											        "editAnchorsForFile"));
											setEnabled(true);
											setProblem("Anchor "
											        + dtm.getValueAt(i, 0)
											        + ": Scan no. values must be in ascending order!");
											return;
										}
									}

								}
								// File anchorFile = new
								// File(outputDir,fnameNoSuffix+".txt");
								cwd = output.getParentFile();
								try {
									PrintWriter bw = new PrintWriter(
									        new BufferedWriter(new FileWriter(
									                output)));
									bw.append(sb.toString());
									bw.flush();
									bw.close();
									anchorFiles.add(output.getAbsolutePath());
								} catch (IOException e) {
									System.err.println(e.getLocalizedMessage());
								}
								StringBuffer sb2 = new StringBuffer();
								for (int i = 0; i < anchorFiles.size(); i++) {
									sb2
									        .append(anchorFiles.get(i)
									                + ((i < anchorFiles.size() - 1) ? (",")
									                        : ("")));
								}
								// System.out.println("Anchors saved at: "+sb2.toString());
								hasSaved = true;
								putWizardData("anchors.location", sb2
								        .toString());
								putWizardData("anchors.use", new Boolean(true));
							}

							setEnabled(true);
						}
					}
				}
			}

		};
		SwingUtilities.invokeLater(r);
	}

	/**
	 * @param fls
	 * @param fta
	 * @return
	 */
	private boolean checkAnchors(final HashSet<String> fls,
	        final HashMap<String, DefaultTableModel> fta) {
		int n = 0;
		HashSet<String> anchorNames = new HashSet<String>();
		for (String key : fls) {
			HashSet<String> localNames = new HashSet<String>();
			DefaultTableModel dtm = fta.get(key);
			int lastIndex = -1;
			if (dtm != null) {
				for (int i = 0; i < dtm.getRowCount(); i++) {
					String aname = dtm.getValueAt(i, 0).toString();
					if (localNames.contains(aname)) {
						// warn, duplicate anchor name
						// JOptionPane.showMessageDialog(getTopLevelAncestor(),
						// "Anchor with name "+aname+" occurs at least twice!");
						jComboBox1.setSelectedItem(key);
						editAnchorsForFile(new ActionEvent(jTable1, 1,
						        "editAnchorsForFile"));
						setProblem("Anchor " + aname
						        + " occurs at least twice!");
						return false;
					} else {
						localNames.add(aname);
					}
					if (anchorNames.contains(aname)) {
						// everything alright?
					} else {
						if (n == 0) {
							// add name
							anchorNames.add(aname);
						} else {
							// warn, anchor does not exist anywhere else
							// JOptionPane.showMessageDialog(getTopLevelAncestor(),
							// "Anchor with name "+aname+" only defined for one input file!");
							jComboBox1.setSelectedItem(key);
							editAnchorsForFile(new ActionEvent(jTable1, 1,
							        "editAnchorsForFile"));
							setProblem("Anchor " + aname
							        + " only defined for one input file!");
							return false;
						}
					}
					if (dtm.getValueAt(i, 1) == null) {
						// JOptionPane.showMessageDialog(getTopLevelAncestor(),
						// "Anchor with name "+aname+" has no scan index defined!");
						jComboBox1.setSelectedItem(key);
						editAnchorsForFile(new ActionEvent(jTable1, 1,
						        "editAnchorsForFile"));
						setProblem("Anchor " + aname
						        + " has no scan index defined!");
						return false;
					}
					String o = dtm.getValueAt(i, 1).toString();
					if (o.equals("-1")) {
						// JOptionPane.showMessageDialog(getTopLevelAncestor(),
						// "Anchor with name "+aname+" has a negative scan index, must be >0!");
						jComboBox1.setSelectedItem(key);
						editAnchorsForFile(new ActionEvent(jTable1, 1,
						        "editAnchorsForFile"));
						setProblem("Anchor " + aname
						        + " has a negative scan index, must be >=0!");
						return false;
					} else if (o.isEmpty()) {
						// JOptionPane.showMessageDialog(getTopLevelAncestor(),
						// "Field value is empty!");
						jComboBox1.setSelectedItem(key);
						editAnchorsForFile(new ActionEvent(jTable1, 1,
						        "editAnchorsForFile"));
						setProblem("Anchor " + aname
						        + " has no scan index defined!");
						return false;
					} else {
						int value = Integer.parseInt(o);
						if (value > lastIndex) {
							// skip
							lastIndex = value;
						} else {
							// JOptionPane.showMessageDialog(getTopLevelAncestor(),
							// "Scan no. values must be in ascending order!");
							jComboBox1.setSelectedItem(key);
							editAnchorsForFile(new ActionEvent(jTable1, 1,
							        "editAnchorsForFile"));
							setProblem("Anchor "
							        + aname
							        + ": Scan no. values must be in ascending order!");
							return false;
						}
					}

				}
			}
			n++;
		}
		return true;
	}

	public void loadAnchorsFromFiles() {
		final TableModelListener tml = this;
		final JComponent jc = this;
		final HashSet<String> fls = this.files;
		final HashMap<String, DefaultTableModel> fta = this.fileToAnchorsMap;
		Runnable r = new Runnable() {

			@Override
			public void run() {
				JFileChooser jfc = new JFileChooser(cwd);
				FileFilter filter = new FileFilter() {

					@Override
					public boolean accept(File arg0) {
						if (arg0.isDirectory()) {
							return true;
						}
						if (arg0.getAbsolutePath().toLowerCase()
						        .endsWith("txt")) {
							return true;
						}
						return false;
					}

					@Override
					public String getDescription() {
						return ".txt";
					}
				};
				jfc.setFileFilter(filter);
				jfc.setMultiSelectionEnabled(true);
				int ret = jfc.showOpenDialog(SwingUtilities.getRoot(jc));
				if (ret == JFileChooser.APPROVE_OPTION) {
					File[] f = jfc.getSelectedFiles();
					// CSVReader
					ArrayList<String> anchorFiles = new ArrayList<String>();
					for (File file : f) {
						CSVReader csvr = new CSVReader();
						HashMap<String, Vector<String>> cols = csvr
						        .getColumns(csvr.read(file.getAbsolutePath()));
						// System.out.println(cols);
						Vector<String> skippedLines = csvr.getSkippedLines();
						EvalTools.eqI(skippedLines.size(), 1, this);
						String associatedToFile = skippedLines.get(0)
						        .substring(csvr.getSkip().length());
						String fnameNoSuffix = associatedToFile
						        .substring(
						                0,
						                (associatedToFile.lastIndexOf(".") < 0 ? associatedToFile
						                        .length()
						                        : associatedToFile
						                                .lastIndexOf(".")));
						boolean isAssociated = false;
						if (fls.contains(associatedToFile)) {
							isAssociated = true;
							// System.out.println("Found associated file: "+associatedToFile);
							Vector<String> names = cols.get("Name");
							Vector<String> scans = cols.get("Scan");
							DefaultTableModel dtm = new DefaultTableModel(
							        new Object[] { "Name", "Apex at scan no." },
							        names.size()) {

								/**
                                 * 
                                 */
								private static final long serialVersionUID = -3797027929890786615L;

								/*
								 * (non-Javadoc)
								 * 
								 * @seejavax.swing.table.AbstractTableModel#
								 * getColumnClass(int)
								 */
								@Override
								public Class<?> getColumnClass(int columnIndex) {
									if (columnIndex == 1) {
										return Integer.class;
									}
									return super.getColumnClass(columnIndex);
								}
							};
							for (int i = 0; i < names.size(); i++) {
								dtm.setValueAt(names.get(i), i, 0);
								dtm.setValueAt(scans.get(i), i, 1);
							}
							dtm.addTableModelListener(tml);
							fta.put(associatedToFile, dtm);
							anchorFiles.add(fnameNoSuffix + ".txt");
							jComboBox1.setSelectedItem(associatedToFile);
						} else {
							for (String s : fls) {
								if (s.endsWith(associatedToFile)) {
									isAssociated = true;
									System.out
									        .println("Found anchor file in same directory as data file");

									Vector<String> names = cols.get("Name");
									Vector<String> scans = cols.get("Scan");
									DefaultTableModel dtm = new DefaultTableModel(
									        new Object[] { "Name",
									                "Apex at scan no." }, names
									                .size()) {

										/**
                                         * 
                                         */
										private static final long serialVersionUID = -3797027929890786615L;

										/*
										 * (non-Javadoc)
										 * 
										 * @see
										 * javax.swing.table.AbstractTableModel
										 * #getColumnClass(int)
										 */
										@Override
										public Class<?> getColumnClass(
										        int columnIndex) {
											if (columnIndex == 1) {
												return Integer.class;
											}
											return super
											        .getColumnClass(columnIndex);
										}
									};
									for (int i = 0; i < names.size(); i++) {
										dtm.setValueAt(names.get(i), i, 0);
										dtm.setValueAt(scans.get(i), i, 1);
									}
									dtm.addTableModelListener(tml);
									fta.put(s, dtm);
									anchorFiles.add(new File(new File(s)
									        .getParent(), fnameNoSuffix
									        + ".txt").getAbsolutePath());
									jComboBox1.setSelectedItem(s);
								}
							}
							if (!isAssociated) {
								JOptionPane.showMessageDialog(SwingUtilities
								        .getRoot(jc),
								        "Could not find a matching file for anchors in\n"
								                + file.getAbsolutePath()
								                + "\nResetting all anchors!",
								        "Unassociated anchors",
								        JOptionPane.OK_OPTION);
								for (String key : fta.keySet()) {
									if (fta.get(key) != null) {
										fta.put(key, new DefaultTableModel());
									}
								}
								jTable1.setModel(new DefaultTableModel());
								anchorFiles.clear();
								hasSaved = true;
								hasLoaded = true;
								return;
							}
							// System.out.println("Could not find associated file: "+associatedToFile);
						}
						StringBuffer sb2 = new StringBuffer();
						for (int i = 0; i < anchorFiles.size(); i++) {
							sb2.append(anchorFiles.get(i)
							        + ((i < anchorFiles.size() - 1) ? (",")
							                : ("")));
						}
						// if(checkAnchors(fls,fta)) {
						// System.out.println("Anchors at: "+sb2.toString());
						putWizardData("anchors.location", sb2.toString());
						putWizardData("anchors.use", new Boolean(true));
						hasSaved = true;
						hasLoaded = true;
						// }else{
						// hasSaved = false;
						// }
					}
				}
			}
		};
		SwingUtilities.invokeLater(r);
	}

	private DefaultTableModel dtm = new DefaultTableModel();
	private String longestString = "";
	private HashSet<String> files = new HashSet<String>();
	private DefaultComboBoxModel dlm = new DefaultComboBoxModel();
	private String activeFile = null;
	private int anchorID = 1;
	private File cwd = null;
	private boolean hasSaved = true;
	private boolean hasLoaded = false;
	private HashMap<String, DefaultTableModel> fileToAnchorsMap = new HashMap<String, DefaultTableModel>();

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton5;
	private javax.swing.JComboBox jComboBox1;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTable jTable1;

	// End of variables declaration//GEN-END:variables

	public void intervalAdded(ListDataEvent e) {
		contentsChanged(e);
	}

	public void intervalRemoved(ListDataEvent e) {

	}

	public void contentsChanged(ListDataEvent e) {
		// System.out.println("Model contents changed on "+e.toString());
		// this.hasSaved = false;
	}

	@Override
	public void revalidate() {
		// System.out.println("Set visible called: "+getWizardData("input.dataInfo"));
		String s = (String) getWizardData("input.dataInfo");
		if (s != null) {
			String[] parts = s.split(",");
			setInputFiles(parts);
		}
		super.revalidate();
	}

	@Override
	protected String validateContents(Component component, Object event) {
		// System.out.println("Validate component called, active file "+this.activeFile+" saved: "+hasSaved+" activeModel rows: "+jTable1.getModel().getRowCount());
		if (!checkAnchors(this.files, this.fileToAnchorsMap)) {
			return "Please check anchors!";
		}
		if ((!this.hasSaved) && (this.jTable1.getModel().getRowCount() > 0)) {
			return "Please save anchor files before proceeding!";
		}

		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seejavax.swing.event.TableModelListener#tableChanged(javax.swing.event.
	 * TableModelEvent)
	 */
	@Override
	public void tableChanged(TableModelEvent e) {
		if (e.getType() == TableModelEvent.UPDATE
		        || e.getType() == TableModelEvent.INSERT
		        || e.getType() == TableModelEvent.DELETE) {
			// System.out.println("Received table model event: "+e.toString());
			setProblem("Please save anchor files before proceeding!");
			hasSaved = false;
		}

	}

}
