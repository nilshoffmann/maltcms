/*
 * $Id$
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, vhudson-jaxb-ri-2.1-646
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2008.10.14 at 08:55:16 AM CEST
//

package maltcms.io.xml.mzML;

import java.math.BigInteger;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

/**
 * The structure into which encoded binary data goes. Byte ordering is always
 * little endian (Intel style). Computers using a different endian style must
 * convert to/from little endian when writing/reading mzML
 * 
 * <p>
 * Java class for BinaryDataArrayType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name=&quot;BinaryDataArrayType&quot;&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base=&quot;{http://psi.hupo.org/schema_revision/mzML_1.0.0}ParamGroupType&quot;&gt;
 *       &lt;sequence&gt;
 *         &lt;element name=&quot;binary&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}base64Binary&quot;/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name=&quot;arrayLength&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}nonNegativeInteger&quot; /&gt;
 *       &lt;attribute name=&quot;dataProcessingRef&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}IDREF&quot; /&gt;
 *       &lt;attribute name=&quot;encodedLength&quot; use=&quot;required&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}nonNegativeInteger&quot; /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BinaryDataArrayType", propOrder = { "binary" })
public class BinaryDataArrayType extends ParamGroupType {

	@XmlElement(required = true)
	protected byte[] binary;
	@XmlAttribute
	@XmlSchemaType(name = "nonNegativeInteger")
	protected BigInteger arrayLength;
	@XmlAttribute
	@XmlIDREF
	@XmlSchemaType(name = "IDREF")
	protected Object dataProcessingRef;
	@XmlAttribute(required = true)
	@XmlSchemaType(name = "nonNegativeInteger")
	protected BigInteger encodedLength;

	/**
	 * Gets the value of the arrayLength property.
	 * 
	 * @return possible object is {@link BigInteger }
	 * 
	 */
	public BigInteger getArrayLength() {
		return this.arrayLength;
	}

	/**
	 * Gets the value of the binary property.
	 * 
	 * @return possible object is byte[]
	 */
	public byte[] getBinary() {
		return this.binary;
	}

	/**
	 * Gets the value of the dataProcessingRef property.
	 * 
	 * @return possible object is {@link Object }
	 * 
	 */
	public Object getDataProcessingRef() {
		return this.dataProcessingRef;
	}

	/**
	 * Gets the value of the encodedLength property.
	 * 
	 * @return possible object is {@link BigInteger }
	 * 
	 */
	public BigInteger getEncodedLength() {
		return this.encodedLength;
	}

	/**
	 * Sets the value of the arrayLength property.
	 * 
	 * @param value
	 *            allowed object is {@link BigInteger }
	 * 
	 */
	public void setArrayLength(final BigInteger value) {
		this.arrayLength = value;
	}

	/**
	 * Sets the value of the binary property.
	 * 
	 * @param value
	 *            allowed object is byte[]
	 */
	public void setBinary(final byte[] value) {
		this.binary = (value);
	}

	/**
	 * Sets the value of the dataProcessingRef property.
	 * 
	 * @param value
	 *            allowed object is {@link Object }
	 * 
	 */
	public void setDataProcessingRef(final Object value) {
		this.dataProcessingRef = value;
	}

	/**
	 * Sets the value of the encodedLength property.
	 * 
	 * @param value
	 *            allowed object is {@link BigInteger }
	 * 
	 */
	public void setEncodedLength(final BigInteger value) {
		this.encodedLength = value;
	}

}
