#allowed DataSources, need to be accessible via the class-path
cross.io.IDataSource = maltcms.io.andims.NetcdfDataSource,maltcms.io.xml.mzXML.MZXMLDataSource,maltcms.io.xml.mzData.MZDataDataSource
maltcms.io.xml.mzXML.MZXMLDataSource.dataSources = maltcms.io.xml.mzXML.MZXMLStaxDataSource,maltcms.io.xml.mzXML.MZXMLSaxDataSource 
cross.datastructures.fragments.Fragment.update.attributes = true

#if true, does not append username and timestamp to output.basedir
omitUserTimePrefix = false
input.basedir = 
input.basedir.recurse = false
output.basedir = ${user.home}${file.separator}maltcms
#if existing files are found in output.basedir, overwrite?
output.overwrite = false

#Whether to use an absolute path as label (if available), or just the filename
#Used for storing pairwise distances/similarities in csv format
cross.io.csv.CSVWriter.useFullPathAsLabel = false

#Allows to adjust the generated xsl link in workflow.xml to point to e.g. an URL
cross.datastructures.workflow.DefaultWorkflow.xslPathPrefix = file:///homes/hoffmann/workspace/Maltcms/release/res/xslt/
#Alternatively, if you want to have all files zipped into an archive
# use cross.io.misc.DefaultMatchAllFileFilter
#All non-matching files will be deleted when Maltcms exits!
cross.datastructures.workflow.DefaultWorkflow.resultFileFilter = cross.io.misc.DefaultConfigurableFileFilter
cross.io.misc.DefaultConfigurableFileFilter.fileTypesToKeep = png,jpg,jpeg,csv,txt,tsv,properties,svg,xml
cross.io.misc.DefaultConfigurableFileFilter.prefixesToMatch = alignment
cross.io.misc.DefaultConfigurableFileFilter.suffixesToMatch = ChromatogramWarp
#Whether workflow results should be zipped
cross.io.misc.WorkflowZipper.zipWorkflow = false
#Whether workflow results which have not been zipped should be deleted
#when the virtual machine terminates
cross.io.misc.WorkflowZipper.deleteOnExit = false
#Netcdf specific
ucar.nc2.NetcdfFileCache.use = false
ucar.nc2.NetcdfDatasetCache.use = false
ucar.nc2.NetcdfFileCache.minCachedFiles = 20
ucar.nc2.NetcdfFileCache.maxCachedFiles = 40
ucar.nc2.NetcdfFileCache.secondsUntilCleanup = 180

#Save structural data as ncml?
ucar.nc2.NetcdfFile.saveNCML = false

#Netcdf fill values for data types
ucar.nc2.NetcdfFile.fillValueFloat = 9.9692099683868690e+36f
ucar.nc2.NetcdfFile.fillValueDouble = 9.9692099683868690e+36
ucar.nc2.NetcdfFile.fillValueInt = -2147483647L
ucar.nc2.NetcdfFile.fillValueShort = -32767
ucar.nc2.NetcdfFile.fillValueByte = -127
ucar.nc2.NetcdfFile.fillValueChar = 0

maltcms.io.andims.NetcdfDataSource.scanDimensionVars = ${andims.var.scan_index},${andims.var.total_intensity},${andims.var.scan_acquisition_time},${andims.var.point_count},${andims.var.flag_count},${andims.var.a_d_sampling_rate},${andims.var.scan_duration},${andims.var.mass_range_min},${andims.var.mass_range_max},${andims.var.scan_type},${andims.var.resolution}

maltcms.io.andims.NetcdfDataSource.scanDimensionName = ${andims.dimension.scan_number}
maltcms.io.andims.NetcdfDataSource.pointDimensionVars = ${andims.var.mass_values},${andims.var.intensity_values}
maltcms.io.andims.NetcdfDataSource.pointDimensionName = ${andims.dimension.point_number}
maltcms.io.andims.NetcdfDataSource.errorDimensionVars = ${andims.var.error_log}
maltcms.io.andims.NetcdfDataSource.errorDimensionName = ${andims.dimension.error_number}
maltcms.io.andims.NetcdfDataSource.instrumentDimensionVars = ${andims.var.instrument_name},${andims.var.instrument_id},${andims.var.instrument_mfr},${andims.var.instrument_model},${andims.var.instrument_sw_version},${andims.var.instrument_os_version}
maltcms.io.andims.NetcdfDataSource.instrumentDimensionName = ${andims.dimension.instrument_number}
