This is the Maltcms maven3 project.
Within this directory, you will find all the submodules, which 
make up Maltcms. 
General configuration for all modules can be found within the 
file pom.xml in the same directory as this README. Module-specific
configuration can be found below each module's directory in the 
corresponding pom.xml file. 

Prerequisites for Maltcms:
- Java JDK 6 (NOT JRE)
  http://www.oracle.com/technetwork/java/javase/downloads/index.html
- Maven 3
  http://maven.apache.org/download.html
- Ant 1.8.2 (site deployment)
  http://ant.apache.org/

Recommended:
- Any IDE supporting maven 2/3 integration and subversion support
  NetBeans 7
  	http://netbeans.org/
  Eclipse 3.7 (Indigo)
  	http://eclipse.org/
	(requires additional m2e plugin and 
	 subclipse/subversive plugins)
  IntelliJ Idea 10.5
  	http://www.jetbrains.com/idea/

The remainder of this README contains task descriptions and the corresponding 
commands required to perform those tasks. Tasks marked with '*' can only be 
executed by registered developers. In order to register, you need to have a
sourceforge account and apply for membership within the project maltcms.

User registration:
Create a new user name at
https://sourceforge.net/user/registration

Then, apply to join maltcms by sending a mail to the project admin with your
sourceforge username:
http://sourceforge.net/users/nilshoffmann/ 

You will then receive access to the project's subversion repository as well as
to the maltcms artifactory instance for artifact resolution (required for maven).

Maven specifics:  
Please note that contrary to usual maven behaviour, test execution is 
currently disabled for default builds due to the long runtime of those.

To enable integration test execution, call maven with the argument -DskipITs=false
The build will run all standard tests without user-intervention.

The directory 'maltcms-test-tools' contains additional modules whose artifacts
are required by maltcms, but which are not automatically built with maltcms anymore
due to their size.

Additionally, due to the size of the project, it is not always possible to 
call multiple maven targets within one call. So instead of calling 
>mvn clean install 
please use
>mvn clean && mvn install

Or issue three separate calls of maven from the command-line:
>mvn clean
>mvn install

In order to build maltcms and have all tests run automatically, call:
>mvn -Dmaven.test.skip=false install

This will create a zip release of the project below maltcms-distribution/target.

--------------------------------------------------------------------------------
	Creating a release version *
--------------------------------------------------------------------------------
Prerequisites:
Ensure that there are no SNAPSHOT dependencies for maltcms-main, maltcms-ui and 
other maltcms modules. If so, please first check out a clean copy of maltcms,
create a tagged release and take note of the release number (e.g. maltcms-1.2.4)
Then update the dependencies to maltcms in the pom.xml (in the same directory as 
this file) with the new release number.

License Headers:
Check, that all new files all have the maltcms license header, provided 
under src/main/resources/licenses/license-maltcms.txt. NetBeans IDE 
allows to add this header as a template for new files. Go to Tools->Templates->
Licenses and select Add in the Dialog. Go ahead and select the license header 
template. 

To add / update the license header, there is a nice plugin for the NetBeans IDE
available: 
	http://plugins.netbeans.org/plugin/17960/license-changer

The newest version supports NetBeans Templates automatically, so you can simply
select the 'maltcms' license from the dropdown menu of available license templates.

Svn keywords:
Then, be sure to set the svn:keywords property recursively on the project. The 
keywords should hold at least the 'Id' property. See the subversion manual for 
more information: 
	http://svnbook.red-bean.com/en/1.6/svn.advanced.props.special.keywords.html
For short
>svn propset -R svn:keywords "Id" *
will set the 'Id' property on EVERY file below the current directory recursively.

Creating a tagged release:
1. Update local svn copy
>svn update
2. Commit local changes
>svn commit
3. Build Maltcms with all tests enabled
>mvn -Dmaven.test.skip=false install
If all tests succeed, continue, otherwise, correct errors and go back to 2.
4. Prepare release
>mvn release:prepare -Dusername=MYSOURCEFORGEUSERNAME =Dpassword=MYSOURCEFORGEPASSWD
If everything looks fine:
5. Open ssh connection
>ssh -t MYSOURCEFORGEUSERNAME,maltcms@shell.sourceforge.net create
6. Perform release
>mvn release:perform 
This builds the next release and also creates and deploys the site to sourceforge.
7. Relax ;-)

--------------------------------------------------------------------------------
	Deploying a snapshot to the artifactory repository *
--------------------------------------------------------------------------------

>mvn deploy


