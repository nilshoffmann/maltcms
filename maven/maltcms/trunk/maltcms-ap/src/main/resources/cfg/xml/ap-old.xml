<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (C) 2008-2012 Nils Hoffmann
 Nils.Hoffmann A T CeBiTec.Uni-Bielefeld.DE

 This file is part of Cross/Maltcms.

 Cross/Maltcms is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Cross/Maltcms is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with Cross/Maltcms.  If not, see &lt;http://www.gnu.org/licenses/>.

 $Id: chroma.xml 436 2012-02-15 16:10:33Z nilshoffmann $

-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <description>
        This file defines elements of the default ChromA pipeline.
    </description>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>${configLocation}</value>
        </property>
    </bean>

    <!-- a command pipeline consists a list of
     commands to be executed -->
    <bean id="commandPipeline" class="cross.datastructures.pipeline.CommandPipeline">
        <property name="checkCommandDependencies" value="false"/>
        <property name="commands">
            <list>
                <ref bean="andiChromImporter" />
                <ref bean="scanExtractor" />
                <ref bean="denseArrayProducer" />
                <ref bean="ticPeakFinder" />
                <ref bean="peakCliqueAlignment" />
            </list>
        </property>
    </bean>
               <!-- commands -->

    <!-- CSVAnchorReader, reads pre-defined alignment anchors -->
    <bean id="csvAnchorReader" class="maltcms.commands.fragments.io.CSVAnchorReader">

    </bean>

    <bean id="andiChromImporter" class="maltcms.commands.fragments.io.ANDIChromImporter">
        <!--<property name="rtStartTime" value="${andiChromImporter.rtStartTime}"/>
        <property name="rtStopTime" value="${andiChromImporter.rtStopTime}"/>-->
    </bean>

    <bean id="scanExtractor" class="maltcms.commands.fragments.preprocessing.ScanExtractor">
        <property name="startTime" value="${scanExtractor.startTime}"/>
        <property name="endTime" value="${scanExtractor.endTime}"/>
    </bean>

    <!-- DenseArrayProducer, creates a dense profile matrix -->
    <bean id="denseArrayProducer" class="maltcms.commands.fragments.preprocessing.DenseArrayProducer">
        <property name="maskedMasses">
            <list>
            <!-- <value>73</value> -->
            <!-- <value>74</value> -->
            <!-- <value>75</value> -->
            <!-- <value>147</value> -->
            <!-- <value>148</value> -->
            <!-- <value>149</value> -->
            </list>
        </property>
        <property name="invertMaskedMasses" value="false"/>
        <property name="normalizeScans" value="true"/>
        <property name="normalizeMeanVariance" value="false"/>
        <property name="massBinResolution" value="1.0d"/>
    </bean>

    <!-- filter beans used by ticPeakFinder -->
    <bean id="savitzkyGolayFilter" class="maltcms.commands.filters.array.SavitzkyGolayFilter" >
        <property name="window" value="${savitzkyGolayFilter.window}"/>
    </bean>

    <bean id="loessBaselineEstimator" class="maltcms.commands.fragments.peakfinding.ticPeakFinder.LoessMinimaBaselineEstimator" scope="prototype">
        <property name="bandwidth" value="0.3"/>
        <property name="accuracy" value="1.0E-12"/>
        <property name="robustnessIterations" value="2"/>
        <property name="minimaWindow" value="${loessBaselineEstimator.minimaWindow}"/>
    </bean>

    <bean id="ticAreaNormalizer" class="maltcms.datastructures.peak.normalization.TicAreaNormalizer">
        <!-- use either total_intensity or total_intensity_filtered -->
        <property name="ticVariableName" value="${ticAreaNormalizer.ticVariableName}"/>
    </bean>

    <!-- TicPeakFinder -->
    <bean id="ticPeakFinder" class="maltcms.commands.fragments.peakfinding.TICPeakFinder">
        <property name="peakThreshold" value="${ticPeakFinder.peakThreshold}"/>
        <property name="baselineEstimator" ref="loessBaselineEstimator"/>
        <property name="filter">
            <list>
                <ref bean="savitzkyGolayFilter"/>
    <!--            <ref bean="topHatFilter"/> -->
            </list>
        </property>
        <!--<property name="snrWindow" value="10"/>-->
        <property name="peakSeparationWindow" value="${ticPeakFinder.peakSeparationWindow}"/>
        <property name="integratePeaks" value="true"/>
        <property name="integrateTICPeaks" value="true"/>
        <property name="integrateRawTic" value="${ticPeakFinder.integrateRawTic}"/>
        <property name="saveGraphics" value="${ticPeakFinder.saveGraphics}"/>
        <property name="peakNormalizers">
            <list>
                <ref bean="ticAreaNormalizer"/>
            </list>
        </property>
    </bean>

    <bean id="gaussianDifferenceSimilarity" class="maltcms.math.functions.similarities.GaussianDifferenceSimilarity" scope="prototype">
        <property name="tolerance" value="${gaussianDifferenceSimilarity.tolerance}"/>
        <property name="threshold" value="${gaussianDifferenceSimilarity.threshold}"/>
    </bean>

    <!-- array similarity functions -->
    <bean id="cosineSimilarity" class="maltcms.math.functions.similarities.ArrayCos" scope="prototype"/>
    <bean id="lpSimilarity" class="maltcms.math.functions.similarities.ArrayLp" scope="prototype"/>

    <!-- time penalized functions -->
    <bean id="timePenalizedSimilarity" class="maltcms.math.functions.ProductSimilarity" scope="prototype">
        <property name="scalarSimilarities">
            <array>
                <ref bean="gaussianDifferenceSimilarity"/>
            </array>
        </property>
        <property name="arraySimilarities">
            <array>
                <ref bean="cosineSimilarity"/>
            </array>
        </property>
    </bean>

    <bean id="workerFactory" class="maltcms.commands.fragments.alignment.peakCliqueAlignment.WorkerFactory" scope="prototype">
        <property name="maxRTDifference" value="${peakCliqueAlignment.maxRTDifference}"/>
        <property name="similarityFunction" ref="timePenalizedSimilarity"/>
        <property name="assumeSymmetricSimilarity" value="true"/>
    </bean>

    <!-- PeakCliqueAlignment -->
    <bean id="peakCliqueAlignment" class="maltcms.commands.fragments.alignment.PeakCliqueAlignment">
        <property name="workerFactory" ref="workerFactory"/>
        <property name="useSparseArrays" value="false"/>
        <property name="minCliqueSize" value="${peakCliqueAlignment.minCliqueSize}"/>
        <property name="maxBBHErrors" value="0"/>
        <property name="savePeakSimilarities" value="false"/>
        <property name="useUserSuppliedAnchors" value="false"/>
        <property name="saveXMLAlignment" value="true"/>
        <property name="savePlots" value="false"/>
        <property name="saveUnmatchedPeaks" value="false"/>
        <property name="saveUnassignedPeaks" value="false"/>
        <property name="saveIncompatiblePeaks" value="false"/>
        <!-- which peak area definition to use, default: peak_area, alternative: peak_area_normalized -->
        <property name="peakAreaVariable" value="${peakCliqueAlignment.peakAreaVariable}"/>
    </bean>
</beans>
