###############################################################################
MetaboliteDB

For a quick introduction into building and running Maltcms, see file README.

###############################################################################
Howto run MetaboliteBrowser:
	Please see file README first on how to launch Maltcms.
	
	From the directory containing this file call
	>java -Xmx256M -cp maltcms.jar maltcms.db.ui.MetaboliteBrowser
	
	or alternatively call
	>scripts/maltcms.sh -exec maltcms.db.ui.MetaboliteBrowser --
	
	A popup dialog will ask you for a database location, username
	and password.
	
###############################################################################	
Howto run DB4oServer:
	From the directory containing this file call
	>java -Xmx256M -cp maltcms.jar maltcms.db.connection.DB4oServer DATABASEFILE PORTNUMBER
	
	or alternatively call
	>scripts/maltcms.sh -exec maltcms.db.connection.DB4oServer -- DATABASEFILE PORTNUMBER

###############################################################################	
Howto build a new Database from MSP files:
	From the directory containing this file call
	>java -Xmx256M -cp maltcms.jar maltcms.db.MSPFormatMetaboliteParser nameOfDBFileToCreate.db4o [nameOfFirstMSPFileToParse,nameOfSecondMSPFileToParse,...]
	
	or alternatively call
	>scripts/maltcms.sh -exec gmdb.MetaboliteParser -- nameOfDBFileToCreate.db4o [nameOfFirstMSPFileToParse,nameOfSecondMSPFileToParse,...] 
	
	This will parse the supplied MSP files and convert them to IMetabolite instances, which are then 
	saved in the database file nameOfDBFileToCreate. You can then fire up MetaboliteBrowser
	to browse the Metabolites.
	
###############################################################################
For Developers:
The Datatype used for storage and retrieval must implement the interface IMetabolite
from maltcms-lib.jar => lib/maltcms-lib.jar. Detection of available members, via
the appropriate Getter/Setter-Methods is based on the Interface definition. Of course,
concrete Implementations can extend the existing interface, but then, the automatic detection
needs to be extended as well.

The typed predicate system is powerful, as it allows arbitrarily complex selection statements to be defined,
but it seems, that internal mapping of these by DB4o is not optimized. This means, that queries probably take much more 
time, than required. Still, a query containing ~6000 Metabolites returns in about 30 seconds. A boost in efficiency
and speed could be achieved by mapping directly to the DB4o internal query language SODA.
